# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LfbRegenerationWildlifeImpactDialog
                                 A QGIS plugin
 Lfb Regeneration and Wildlife Impact Monitoring
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-05-08
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Gr√ºnecho
        email                : support@grunecho.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import copy
import json

from qgis.core import QgsMessageLog, QgsProject, QgsVectorLayer, QgsJsonUtils, QgsField, QgsFields, QgsVectorFileWriter, QgsCoordinateTransformContext
from qgis.PyQt import QtWidgets, uic
from qgis.PyQt.QtCore import QCoreApplication, QSettings, QTranslator
from qgis.PyQt.QtWidgets import QDialog, QTableWidgetItem

from PyQt5.uic import loadUi
from PyQt5 import QtCore, QtGui, QtWidgets

from jsonschema import Draft7Validator

from ...form.textfield import TextField
from ..dropdown import DropDown
from ..array_field import ArrayField
from ..boolean import Boolean

UI_CLASS, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'object_view.ui'))


class ObjectView(QtWidgets.QWidget, UI_CLASS):
    inputChanged = QtCore.pyqtSignal(object, str)

    def __init__(self, interface, json, schema, key):
        """Constructor."""

        QDialog.__init__(self, interface.mainWindow())

        self.setupUi(self)

        self.json = json
        self.key = key
        self.schema = schema

        if self.key not in self.json:
            self.json[self.key] = {}

        self.fieldArray = []


        self.lfbObjectGroup.setTitle(self.schema['title'])
        if self.findChild(QtWidgets.QWidget, 'lfbObjectGroup'):
            if 'title' in schema:
                self.lfbObjectGroup.setTitle(schema['title'])
            else:
                self.lfbObjectGroup.setTitle('')
        
        items = schema['properties'].items()

        for attr, value in items:

            if attr not in self.json[self.key]:
                self.json[self.key][attr] = None

            QgsMessageLog.logMessage('TEXTFIELD: ' + str(attr), 'LFG')

            valueType = value['type']

            if 'enum' in value:
                field = DropDown(interface, self.json, value, attr)
            elif valueType == 'boolean':
                field = Boolean(interface, self.json, value, attr)
                #field.lfbInfoBox.connect(self.infoBoxClicked)
            else:
                
                field = TextField(interface, self.json[self.key], value, attr)

            self.lfbFormObject.addWidget(field)
            field.inputChanged.connect(self.onInputChanged)
            
            #self.fieldArray.append(field)


        self.show()

    def onInputChanged(self, jsons, key):
        QgsMessageLog.logMessage('setJson: ' + str(self.json), 'LFe')

        #self.json[self.key] = value
        #self.validate()
    
    def setJson(self, newJson, setFields = True):
        
        QgsMessageLog.logMessage('SET NEW: ' + str(newJson), 'LFe')
        
    
    def validate(self):
        #jsonCpy = self.json.copy()
        #jsonCpy['name'] = self.lfbTextField.text()

        # https://python-jsonschema.readthedocs.io/en/stable/validate/
        v = Draft7Validator(self.schema)
        errors = sorted(v.iter_errors(self.internJson[self.key]), key=lambda e: e.path)

        self.json[self.key] = self.internJson[self.key]

        if self.json[self.key] is None:
            self.lfbTextFieldError.hide()
            self.lfbTextFieldSuccess.hide()
            self.lfbTextFieldHelp.show()
            self.lfbTextField.setStyleSheet("QLineEdit {\n	border: 2px solid red;\n	border-radius: 10px;\n	padding: 10px;\n}")

        elif len(errors) == 0:
            self.lfbTextFieldError.hide()
            self.lfbTextFieldSuccess.hide()
            self.lfbTextFieldHelp.show()
            self.lfbTextField.setStyleSheet("QLineEdit {\n	border: 2px solid green;\n	border-radius: 10px;\n	padding: 10px;\n}")            
        else:
            self.lfbTextFieldError.show()
            self.lfbTextFieldSuccess.hide()
            self.lfbTextFieldHelp.hide()
            self.lfbTextField.setStyleSheet("QLineEdit {\n	border: 2px solid red;\n	border-radius: 10px;\n	padding: 10px;\n}")

            for error in errors:
                self.lfbTextFieldError.setText(error.message)

        
        #self.inputChanged.emit(str(self.json[self.key]))