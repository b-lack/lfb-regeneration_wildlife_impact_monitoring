# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LfbRegenerationWildlifeImpactDialog
                                 A QGIS plugin
 Lfb Regeneration and Wildlife Impact Monitoring
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-05-08
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Gr√ºnecho
        email                : support@grunecho.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

import json

from qgis.core import QgsMessageLog, QgsProject, QgsVectorLayer, QgsJsonUtils, QgsField, QgsFields, QgsVectorFileWriter, QgsCoordinateTransformContext
from qgis.PyQt import QtWidgets, uic
from qgis.PyQt.QtCore import QCoreApplication, QSettings, QTranslator
from qgis.PyQt.QtWidgets import QDialog

from PyQt5.uic import loadUi
from PyQt5 import QtCore

from jsonschema import Draft7Validator


UI_CLASS, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'dropdown.ui'))


class DropDown(QtWidgets.QWidget, UI_CLASS):
    inputChanged = QtCore.pyqtSignal(str)

    def __init__(self, interface, json, schema, key):
        """Constructor."""

        QDialog.__init__(self, interface.mainWindow())

        self.setupUi(self)

        if(key not in json):
            json[key] = None

        self.json = json
        self.internJson = json.copy()
        self.schema = schema
        self.key = key
        self.defaultValue = self.json[self.key]

        

        self.lfbTextFieldLabel.setText(QCoreApplication.translate("FormFields", self.schema['title']))
        self.lfbTextFieldHelp.setText(self.schema['helperText'])
        self.lfbComboBox.currentIndexChanged.connect(self.setInputText)
        self.lfbComboBox.addItems(self.schema['enumLabels'])


        self.validate() 

        self.show()

    def setJson(self, newJson, setFields = True):
        
        self.json = newJson

        if setFields == False:
            return

        if self.json is not None and self.json[self.key] is not None:
            index = self.schema['enum'].index(self.json[self.key])
            if index != -1:
                self.lfbComboBox.setCurrentIndex(index)
        else:
            self.lfbComboBox.setCurrentIndex(0)
        

        
    def isfloat(self, num):
        try:
            float(num)
            return True
        except ValueError:
            return False
    def setInputText(self, value):
        
        

        value = self.schema['enum'][value]


        self.internJson[self.key] = value
        

        self.validate()

    def validate(self):

        # https://python-jsonschema.readthedocs.io/en/stable/validate/
        v = Draft7Validator(self.schema)
        errors = sorted(v.iter_errors(self.internJson[self.key]), key=lambda e: e.path)

        self.json[self.key] = self.internJson[self.key]

        if self.json[self.key] is None:
            self.lfbTextFieldError.hide()
            self.lfbTextFieldSuccess.hide()

        if len(errors) == 0:
            self.lfbTextFieldError.hide()
            self.lfbTextFieldSuccess.show()
            #self.emitText()
        else:
            self.lfbTextFieldError.show()
            self.lfbTextFieldSuccess.hide()
            for error in errors:
                if "is not type":
                    self.lfbTextFieldError.setText(QCoreApplication.translate("errorMessages", 'Eine Auswahl ist pflicht.'))
                else:
                    self.lfbTextFieldError.setText(QCoreApplication.translate("errorMessages", error.message))

        self.inputChanged.emit(str(self.json[self.key]))
