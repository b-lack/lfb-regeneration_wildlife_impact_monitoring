# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LfbRegenerationWildlifeImpactDialog
                                 A QGIS plugin
 Lfb Regeneration and Wildlife Impact Monitoring
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-05-08
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Gr√ºnecho
        email                : support@grunecho.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import json
import datetime

from qgis.core import QgsFeature, QgsFeatureRequest, QgsPointXY, QgsGeometry, QgsMessageLog, QgsProject, QgsVectorLayer, QgsJsonUtils, QgsMapLayer, QgsField, QgsFields, QgsVectorFileWriter, QgsCoordinateTransformContext
from qgis.PyQt import QtWidgets, uic, QtGui
from qgis.PyQt.QtCore import QDateTime, QVariant, QCoreApplication, QSettings, QTranslator
from qgis.PyQt.QtWidgets import QDialog

from PyQt5.uic import loadUi
from PyQt5 import QtCore


from .draft_item import DraftItem


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
UI_CLASS, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'draft_selection.ui'))


class DraftSelection(QtWidgets.QWidget, UI_CLASS):
    # https://forum.qt.io/topic/133959/example-of-calling-a-function-to-parent/6
    draftSelected = QtCore.pyqtSignal(object)

    def __init__(self, interface):
        """Constructor."""

        # super(LfbRegenerationWildlifeImpactDialog, self).__init__(parent)
        QDialog.__init__(self, interface.mainWindow())

        

        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.LAYER_PREFIX = "lfb_draft_layer"

        # QGIS interface
        self.iface = interface

        self.fields = QgsFields()
        
        self.fields.append(QgsField("created", QVariant.DateTime))
        self.fields.append(QgsField("modified", QVariant.DateTime))
        self.fields.append(QgsField("properties", QVariant.String))

        self.setupDraftLayer()

        self.currentFeatureId = None


        # Read Drafts
        self.readDrafts()

        self.show()

    def setupDraftLayer(self):
        """Check if private layer exists"""
        
        self.draftLayerExists = False

        names = [layer for layer in QgsProject.instance().mapLayers().values()]

        for i in names:
            if(i.id().startswith(self.LAYER_PREFIX)):
                self.vl = i
                self.draftLayerExists = True
                break

        if(self.draftLayerExists):
            QgsMessageLog.logMessage('Layer exists', "LFB")
            return


        #path_absolute = QgsProject.instance().readPath("./")

        # https://anitagraser.com/pyqgis-101-introduction-to-qgis-python-programming-for-non-programmers/pyqgis101-creating-editing-a-new-vector-layer/
        self.vl = QgsVectorLayer("Point", self.LAYER_PREFIX, "memory")
        self.vl.setFlags(QgsMapLayer.Private)
        pr = self.vl.dataProvider()

        # add fields
        pr.addAttributes(self.fields)
        self.vl.updateFields() # tell the vector layer to fetch changes from the provider

        QgsProject.instance().addMapLayer(self.vl)
    
        
    def setDraftPath(self, path):
        pathToBeSet = os.path.join(path, self.LAYER_PREFIX + '.gpkg')
        writer = QgsVectorFileWriter.writeAsVectorFormatV3(self.vl, pathToBeSet, QgsCoordinateTransformContext(), QgsVectorFileWriter.SaveVectorOptions())

        if writer[0] == QgsVectorFileWriter.NoError:
            self.vl.setDataSource(pathToBeSet, self.vl.name(), 'ogr')
            self.vl.triggerRepaint() 
        else:
            print("error")

    
    def listWidgetClicked(self, item):
        QgsMessageLog.logMessage('selected ID: ' + str(item) , "LFB")
        featureList = self.vl.getFeatures()
        for feat in featureList:
            
            if(feat.id() == item):
                json_object = json.loads(feat['properties'])
                self.currentFeatureId = feat.id()
                self.draftSelected.emit(json_object)
                break

    def readDrafts(self):
        # self.listWidget.clear()
        for i in reversed(range(self.lfbDraftList.count())):
            self.lfbDraftList.itemAt(i).widget().setParent(None)

        featureList = self.vl.getFeatures()
        
        sorted_featureList = sorted(featureList, key=lambda x: x['modified'], reverse=True)
        
        for feature in sorted_featureList:
            item = DraftItem(self.iface, feature)
            item.featureSelected.connect(self.listWidgetClicked)
            item.removeFeature.connect(self.removeFeature)
            self.lfbDraftList.addWidget(item)

    def removeFeature(self, featureId):
        self.vl.startEditing()
        self.vl.deleteFeature(featureId)
        self.vl.commitChanges()
        self.vl.endEditCommand()
        QgsProject.instance().write()
        self.readDrafts()

    def saveFeature(self, jsonObj):

        if jsonObj is None:
            return
        
        x = jsonObj['coordinates']['latitude'] #14.223838264540632
        y = jsonObj['coordinates']['longitude']

        currentDateTime = QDateTime.currentDateTime()

        if self.currentFeatureId is not None:
            for tFeature in self.vl.getFeatures():

                QgsMessageLog.logMessage('ID: ' + str(tFeature.id()) + ' - ' + str(self.currentFeatureId), "LFB")

                if tFeature.id() == self.currentFeatureId:
                    self.vl.startEditing()
                    tFeature.setAttribute('modified', currentDateTime)
                    feature = tFeature
        else:
            feature = QgsFeature()

            # inform the feature of its fields
            feature.setFields(self.fields)
            geometry = QgsGeometry.fromPointXY(QgsPointXY(x, y))
            
            feature.setGeometry(geometry)

            #for attr, value in jsonObj.items():
            #    feature.setAttribute(attr, value)
            
            feature.setAttribute('created', currentDateTime)
            feature.setAttribute('modified', currentDateTime)
                
            self.vl.startEditing()

            self.vl.addFeature(feature)
        
        QgsMessageLog.logMessage('ID: ' + str(self.currentFeatureId), "LFB")
        
        # SET META DATA
        feature.setAttribute('properties', json.dumps(jsonObj))

        self.vl.updateFeature(feature)

        self.vl.commitChanges()
        self.vl.endEditCommand()
        QgsProject.instance().write()
        self.vl.updateExtents()

        for feature in self.vl.getFeatures():
            if feature['modified'] == currentDateTime:
                self.currentFeatureId = feature.id()

        

        self.readDrafts()


        



