# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LfbRegenerationWildlifeImpactDialog
                                 A QGIS plugin
 Lfb Regeneration and Wildlife Impact Monitoring
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-05-08
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Gr√ºnecho
        email                : support@grunecho.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

import json

from qgis.core import QgsMessageLog
from qgis.PyQt import QtWidgets, uic
from qgis.PyQt.QtWidgets import QDialog

from PyQt5.uic import loadUi
from PyQt5 import QtCore

from ...utils.helper import Utils


UI_CLASS, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'draft_item.ui'))


class DraftItem(QtWidgets.QWidget, UI_CLASS):
    featureSelected = QtCore.pyqtSignal(int)
    removeFeature = QtCore.pyqtSignal(int)

    def __init__(self, interface, feature, schema):
        """Constructor."""

        QDialog.__init__(self, interface.mainWindow())

        self.setupUi(self)

        self.feature = feature
        self.properties = json.loads(feature['form'])

        self.lfbDraftIconBtn.clicked.connect(self.on_lfbDraftIconBtn_clicked)
        self.lfbDraftIconRemoveBtn.clicked.connect(self.on_lfbDraftIconRemoveBtn_clicked)

        self.lfbDraftModifiedByBtn.setText(feature['modified'].toString() if feature['modified'] is not None else '-')
        self.lfbDraftModifiedBtn.setText(feature['created'].toString() if feature['created'] is not None else '-')

        #if 'general' in self.properties:
        #    self.lfbDraftAufnahmetruppLabel.setText(self.properties['general']['aufnahmetrupp'] if self.properties['general']['aufnahmetrupp'] is not None else '-')
        #if 'workflow' in self.properties:
        #    self.lfbDraftWorkflowLabel.setText(Utils.enumLabel(self.properties['workflow'], schema['properties']['workflow']) if self.properties['workflow'] is not None else '-')

        self.show()

    def on_lfbDraftIconBtn_clicked(self):
        self.featureSelected.emit(self.feature.id())
    
    def on_lfbDraftIconRemoveBtn_clicked(self):
        self.removeFeature.emit(self.feature.id())
        
 