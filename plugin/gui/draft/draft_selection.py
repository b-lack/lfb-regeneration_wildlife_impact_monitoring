# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LfbRegenerationWildlifeImpactDialog
                                 A QGIS plugin
 Lfb Regeneration and Wildlife Impact Monitoring
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-05-08
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Gr√ºnecho
        email                : support@grunecho.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import json
import datetime

from qgis.core import QgsFeature, QgsFeatureRequest, QgsPointXY, QgsGeometry, QgsMessageLog, QgsProject, QgsVectorLayer, QgsJsonUtils, QgsField, QgsFields, QgsVectorFileWriter, QgsCoordinateTransformContext
from qgis.PyQt import QtWidgets, uic, QtGui
from qgis.PyQt.QtCore import QDateTime, QVariant, QCoreApplication, QSettings, QTranslator
from qgis.PyQt.QtWidgets import QDialog

from PyQt5.uic import loadUi
from PyQt5 import QtCore


from .draft_item import DraftItem


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
UI_CLASS, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'draft_selection.ui'))


class DraftSelection(QtWidgets.QWidget, UI_CLASS):
    # https://forum.qt.io/topic/133959/example-of-calling-a-function-to-parent/6
    draftSelected = QtCore.pyqtSignal(object)

    def __init__(self, interface):
        """Constructor."""

        # super(LfbRegenerationWildlifeImpactDialog, self).__init__(parent)
        QDialog.__init__(self, interface.mainWindow())

        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.LAYER_PREFIX = "lfb_draft_layer"

        # QGIS interface
        self.iface = interface

        self.fields = QgsFields()
        
        self.fields.append(QgsField("created", QVariant.DateTime))
        self.fields.append(QgsField("modified", QVariant.DateTime))
        self.fields.append(QgsField("properties", QVariant.String))

        self.setupDraftLayer()
        #self.addFromGeoJson()

        self.currentFeatureId = None


        # Read Drafts
        self.readDrafts()

        self.show()

    def setupDraftLayer(self):
        """Check if private layer exists"""
        
        self.draftLayerExists = False

        names = [layer for layer in QgsProject.instance().mapLayers().values()]

        for i in names:
            if(i.id().startswith(self.LAYER_PREFIX)):
                QgsMessageLog.logMessage('' + i.id(), "LFB")
                self.vl = i
                self.draftLayerExists = True
                break
            # QgsProject.instance().removeMapLayer( i.id() )

        if(self.draftLayerExists):
            QgsMessageLog.logMessage('Layer exists', "LFB")
            return


        path_absolute = QgsProject.instance().readPath("./")
        #QgsMessageLog.logMessage('' + unicode(path_absolute), "LFB")

        # https://anitagraser.com/pyqgis-101-introduction-to-qgis-python-programming-for-non-programmers/pyqgis101-creating-editing-a-new-vector-layer/
        # add Vector Layer
        self.vl = QgsVectorLayer("Point", self.LAYER_PREFIX, "memory")
        pr = self.vl.dataProvider()

        # add fields
        pr.addAttributes(self.fields)
        self.vl.updateFields() # tell the vector layer to fetch changes from the provider

        QgsProject.instance().addMapLayer(self.vl)

        #self.iface.addVectorLayer('/Users/b-mac/sites/lfb/raw/by_python/natural_earth_vector.gpkg|layername=foo', '', 'ogr')

        
    def setDraftPath(self, path):
        pathToBeSet = os.path.join(path, self.LAYER_PREFIX + '.gpkg')
        writer = QgsVectorFileWriter.writeAsVectorFormatV3(self.vl, pathToBeSet, QgsCoordinateTransformContext(), QgsVectorFileWriter.SaveVectorOptions())

        #QgsProject.instance().removeMapLayers( [self.vl.id()] )
        #QgsProject.instance().addMapLayer(self.vl)

        if writer[0] == QgsVectorFileWriter.NoError:
            self.vl.setDataSource(pathToBeSet, self.vl.name(), 'ogr')
            self.vl.triggerRepaint() 
        else:
            print("error")

    def addFromGeoJson(self, properties):
        if(self.draftLayerExists == False):
            QgsMessageLog.logMessage('!draftLayerExists', "LFB")
            return
            

        properties['id'] = 'asd'

        elementToAdd = {
            "type": "FeatureCollection",
            "features": [
                {
                "type": "Feature",
                "properties": properties,
                "geometry": {
                    "coordinates": [
                    14.223838264540632,
                    47.229791670453636
                    ],
                    "type": "Point"
                }
                }
            ]
        }
        
        self.vl.startEditing()

        geometry = QgsJsonUtils.stringToFeatureList(json.dumps(elementToAdd), self.fields)
        self.vl.addFeatures(geometry)
        
        self.vl.commitChanges()
        self.vl.endEditCommand()
        QgsProject.instance().write()

        self.vl.updateExtents()


    def listWidgetClicked(self, item):

        featureList = self.vl.getFeatures()
        for feat in featureList:

            if(feat.id() == item):
                json_object = json.loads(feat['properties'])
                self.draftSelected.emit(json_object)
                break

    def readDrafts(self):
        # self.listWidget.clear()
        for i in reversed(range(self.lfbDraftList.count())):
            self.lfbDraftList.itemAt(i).widget().setParent(None)

        featureList = self.vl.getFeatures()
        
        sorted_featureList = sorted(featureList, key=lambda x: x['modified'], reverse=True)
        
        for feature in sorted_featureList:
            item = DraftItem(self.iface, feature)
            item.featureSelected.connect(self.listWidgetClicked)
            self.lfbDraftList.addWidget(item)


    def saveFeature(self, jsonObj):

        if jsonObj is None:
            return
        
        x = 14.223838264540632
        y = 47.229791670453636

        QgsMessageLog.logMessage('feature ID' + str(jsonObj), "LFB")

        if self.currentFeatureId is not None:
            for feature in self.vl.getFeatures():

                if feature.id() == self.currentFeatureId:
                    self.vl.startEditing()
                    feature.setAttribute('modified', QDateTime.currentDateTime())
        else:
            feature = QgsFeature()

            # inform the feature of its fields
            feature.setFields(self.fields)
            geometry = QgsGeometry.fromPointXY(QgsPointXY(x, y))
            
            feature.setGeometry(geometry)

            #for attr, value in jsonObj.items():
            #    feature.setAttribute(attr, value)
            currentDateTime = QDateTime.currentDateTime()
            feature.setAttribute('created', currentDateTime)
            feature.setAttribute('modified', currentDateTime)
                
            self.vl.startEditing()

            self.vl.addFeature(feature)
            
        # SET META DATA
        feature.setAttribute('properties', json.dumps(jsonObj))

        self.vl.updateFeature(feature)

        self.vl.commitChanges()
        self.vl.endEditCommand()
        QgsProject.instance().write()
        self.vl.updateExtents()
        self.currentFeatureId = feature.id()

        self.readDrafts()


        



